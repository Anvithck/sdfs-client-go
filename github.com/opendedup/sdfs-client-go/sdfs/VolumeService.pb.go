// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: VolumeService.proto

package sdfs

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MessageQueueInfoResponse_MQType int32

const (
	MessageQueueInfoResponse_RabbitMQ MessageQueueInfoResponse_MQType = 0
	MessageQueueInfoResponse_PubSub   MessageQueueInfoResponse_MQType = 1
)

// Enum value maps for MessageQueueInfoResponse_MQType.
var (
	MessageQueueInfoResponse_MQType_name = map[int32]string{
		0: "RabbitMQ",
		1: "PubSub",
	}
	MessageQueueInfoResponse_MQType_value = map[string]int32{
		"RabbitMQ": 0,
		"PubSub":   1,
	}
)

func (x MessageQueueInfoResponse_MQType) Enum() *MessageQueueInfoResponse_MQType {
	p := new(MessageQueueInfoResponse_MQType)
	*p = x
	return p
}

func (x MessageQueueInfoResponse_MQType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageQueueInfoResponse_MQType) Descriptor() protoreflect.EnumDescriptor {
	return file_VolumeService_proto_enumTypes[0].Descriptor()
}

func (MessageQueueInfoResponse_MQType) Type() protoreflect.EnumType {
	return &file_VolumeService_proto_enumTypes[0]
}

func (x MessageQueueInfoResponse_MQType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageQueueInfoResponse_MQType.Descriptor instead.
func (MessageQueueInfoResponse_MQType) EnumDescriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{2, 0}
}

// Request payload
type VolumeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VolumeInfoRequest) Reset() {
	*x = VolumeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeInfoRequest) ProtoMessage() {}

func (x *VolumeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeInfoRequest.ProtoReflect.Descriptor instead.
func (*VolumeInfoRequest) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{0}
}

type VolumeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path                string                      `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Name                string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CurrentSize         int64                       `protobuf:"varint,3,opt,name=currentSize,proto3" json:"currentSize,omitempty"`
	Capactity           int64                       `protobuf:"varint,4,opt,name=capactity,proto3" json:"capactity,omitempty"`
	MaxPercentageFull   float64                     `protobuf:"fixed64,5,opt,name=maxPercentageFull,proto3" json:"maxPercentageFull,omitempty"`
	DuplicateBytes      int64                       `protobuf:"varint,6,opt,name=duplicateBytes,proto3" json:"duplicateBytes,omitempty"`
	ReadBytes           float64                     `protobuf:"fixed64,7,opt,name=readBytes,proto3" json:"readBytes,omitempty"`
	WriteBytes          int64                       `protobuf:"varint,8,opt,name=writeBytes,proto3" json:"writeBytes,omitempty"`
	SerialNumber        int64                       `protobuf:"varint,9,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	DseSize             int64                       `protobuf:"varint,10,opt,name=dseSize,proto3" json:"dseSize,omitempty"`
	DseCompSize         int64                       `protobuf:"varint,11,opt,name=dseCompSize,proto3" json:"dseCompSize,omitempty"`
	ReadOps             float64                     `protobuf:"fixed64,12,opt,name=readOps,proto3" json:"readOps,omitempty"`
	WriteOps            float64                     `protobuf:"fixed64,13,opt,name=writeOps,proto3" json:"writeOps,omitempty"`
	ReadErrors          int64                       `protobuf:"varint,14,opt,name=readErrors,proto3" json:"readErrors,omitempty"`
	WriteErrors         int64                       `protobuf:"varint,15,opt,name=writeErrors,proto3" json:"writeErrors,omitempty"`
	Files               int64                       `protobuf:"varint,16,opt,name=files,proto3" json:"files,omitempty"`
	ClosedGracefully    bool                        `protobuf:"varint,17,opt,name=closedGracefully,proto3" json:"closedGracefully,omitempty"`
	AllowExternalLinks  bool                        `protobuf:"varint,18,opt,name=allowExternalLinks,proto3" json:"allowExternalLinks,omitempty"`
	UsePerfMon          bool                        `protobuf:"varint,19,opt,name=usePerfMon,proto3" json:"usePerfMon,omitempty"`
	ClusterId           string                      `protobuf:"bytes,20,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	VolumeClustered     bool                        `protobuf:"varint,21,opt,name=VolumeClustered,proto3" json:"VolumeClustered,omitempty"`
	ReadTimeoutSeconds  int32                       `protobuf:"varint,22,opt,name=readTimeoutSeconds,proto3" json:"readTimeoutSeconds,omitempty"`
	WriteTimeoutSeconds int32                       `protobuf:"varint,23,opt,name=writeTimeoutSeconds,proto3" json:"writeTimeoutSeconds,omitempty"`
	CompressedMetaData  bool                        `protobuf:"varint,24,opt,name=compressedMetaData,proto3" json:"compressedMetaData,omitempty"`
	SyncFiles           bool                        `protobuf:"varint,25,opt,name=syncFiles,proto3" json:"syncFiles,omitempty"`
	MaxPageSize         int64                       `protobuf:"varint,26,opt,name=maxPageSize,proto3" json:"maxPageSize,omitempty"`
	MessageQueue        []*MessageQueueInfoResponse `protobuf:"bytes,27,rep,name=messageQueue,proto3" json:"messageQueue,omitempty"`
	PerfMonFile         string                      `protobuf:"bytes,28,opt,name=perfMonFile,proto3" json:"perfMonFile,omitempty"`
	Offline             bool                        `protobuf:"varint,29,opt,name=offline,proto3" json:"offline,omitempty"`
}

func (x *VolumeInfoResponse) Reset() {
	*x = VolumeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeInfoResponse) ProtoMessage() {}

func (x *VolumeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeInfoResponse.ProtoReflect.Descriptor instead.
func (*VolumeInfoResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{1}
}

func (x *VolumeInfoResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *VolumeInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeInfoResponse) GetCurrentSize() int64 {
	if x != nil {
		return x.CurrentSize
	}
	return 0
}

func (x *VolumeInfoResponse) GetCapactity() int64 {
	if x != nil {
		return x.Capactity
	}
	return 0
}

func (x *VolumeInfoResponse) GetMaxPercentageFull() float64 {
	if x != nil {
		return x.MaxPercentageFull
	}
	return 0
}

func (x *VolumeInfoResponse) GetDuplicateBytes() int64 {
	if x != nil {
		return x.DuplicateBytes
	}
	return 0
}

func (x *VolumeInfoResponse) GetReadBytes() float64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *VolumeInfoResponse) GetWriteBytes() int64 {
	if x != nil {
		return x.WriteBytes
	}
	return 0
}

func (x *VolumeInfoResponse) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *VolumeInfoResponse) GetDseSize() int64 {
	if x != nil {
		return x.DseSize
	}
	return 0
}

func (x *VolumeInfoResponse) GetDseCompSize() int64 {
	if x != nil {
		return x.DseCompSize
	}
	return 0
}

func (x *VolumeInfoResponse) GetReadOps() float64 {
	if x != nil {
		return x.ReadOps
	}
	return 0
}

func (x *VolumeInfoResponse) GetWriteOps() float64 {
	if x != nil {
		return x.WriteOps
	}
	return 0
}

func (x *VolumeInfoResponse) GetReadErrors() int64 {
	if x != nil {
		return x.ReadErrors
	}
	return 0
}

func (x *VolumeInfoResponse) GetWriteErrors() int64 {
	if x != nil {
		return x.WriteErrors
	}
	return 0
}

func (x *VolumeInfoResponse) GetFiles() int64 {
	if x != nil {
		return x.Files
	}
	return 0
}

func (x *VolumeInfoResponse) GetClosedGracefully() bool {
	if x != nil {
		return x.ClosedGracefully
	}
	return false
}

func (x *VolumeInfoResponse) GetAllowExternalLinks() bool {
	if x != nil {
		return x.AllowExternalLinks
	}
	return false
}

func (x *VolumeInfoResponse) GetUsePerfMon() bool {
	if x != nil {
		return x.UsePerfMon
	}
	return false
}

func (x *VolumeInfoResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *VolumeInfoResponse) GetVolumeClustered() bool {
	if x != nil {
		return x.VolumeClustered
	}
	return false
}

func (x *VolumeInfoResponse) GetReadTimeoutSeconds() int32 {
	if x != nil {
		return x.ReadTimeoutSeconds
	}
	return 0
}

func (x *VolumeInfoResponse) GetWriteTimeoutSeconds() int32 {
	if x != nil {
		return x.WriteTimeoutSeconds
	}
	return 0
}

func (x *VolumeInfoResponse) GetCompressedMetaData() bool {
	if x != nil {
		return x.CompressedMetaData
	}
	return false
}

func (x *VolumeInfoResponse) GetSyncFiles() bool {
	if x != nil {
		return x.SyncFiles
	}
	return false
}

func (x *VolumeInfoResponse) GetMaxPageSize() int64 {
	if x != nil {
		return x.MaxPageSize
	}
	return 0
}

func (x *VolumeInfoResponse) GetMessageQueue() []*MessageQueueInfoResponse {
	if x != nil {
		return x.MessageQueue
	}
	return nil
}

func (x *VolumeInfoResponse) GetPerfMonFile() string {
	if x != nil {
		return x.PerfMonFile
	}
	return ""
}

func (x *VolumeInfoResponse) GetOffline() bool {
	if x != nil {
		return x.Offline
	}
	return false
}

type MessageQueueInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName string                          `protobuf:"bytes,1,opt,name=hostName,proto3" json:"hostName,omitempty"`
	MqType   MessageQueueInfoResponse_MQType `protobuf:"varint,2,opt,name=mqType,proto3,enum=org.opendedup.grpc.MessageQueueInfoResponse_MQType" json:"mqType,omitempty"`
	Port     int32                           `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Topic    string                          `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	AuthInfo string                          `protobuf:"bytes,5,opt,name=authInfo,proto3" json:"authInfo,omitempty"`
}

func (x *MessageQueueInfoResponse) Reset() {
	*x = MessageQueueInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_VolumeService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageQueueInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageQueueInfoResponse) ProtoMessage() {}

func (x *MessageQueueInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_VolumeService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageQueueInfoResponse.ProtoReflect.Descriptor instead.
func (*MessageQueueInfoResponse) Descriptor() ([]byte, []int) {
	return file_VolumeService_proto_rawDescGZIP(), []int{2}
}

func (x *MessageQueueInfoResponse) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *MessageQueueInfoResponse) GetMqType() MessageQueueInfoResponse_MQType {
	if x != nil {
		return x.MqType
	}
	return MessageQueueInfoResponse_RabbitMQ
}

func (x *MessageQueueInfoResponse) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MessageQueueInfoResponse) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MessageQueueInfoResponse) GetAuthInfo() string {
	if x != nil {
		return x.AuthInfo
	}
	return ""
}

var File_VolumeService_proto protoreflect.FileDescriptor

var file_VolumeService_proto_rawDesc = []byte{
	0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x0e, 0x53, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x13, 0x0a, 0x11, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa2,
	0x08, 0x0a, 0x12, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x61, 0x70, 0x61, 0x63, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x61, 0x70, 0x61, 0x63, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a,
	0x11, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x46, 0x75,
	0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x61,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x50, 0x65, 0x72, 0x66, 0x4d, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x50, 0x65, 0x72, 0x66, 0x4d, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x4d,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x66, 0x4d, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x06,
	0x6d, 0x71, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x51, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x6d, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x22, 0x0a, 0x06, 0x4d, 0x51, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x61, 0x62,
	0x62, 0x69, 0x74, 0x4d, 0x51, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x53, 0x75,
	0x62, 0x10, 0x01, 0x32, 0xcc, 0x01, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x32, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2f, 0x73, 0x64, 0x66,
	0x73, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x64, 0x66, 0x73,
	0x2f, 0x3b, 0x73, 0x64, 0x66, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_VolumeService_proto_rawDescOnce sync.Once
	file_VolumeService_proto_rawDescData = file_VolumeService_proto_rawDesc
)

func file_VolumeService_proto_rawDescGZIP() []byte {
	file_VolumeService_proto_rawDescOnce.Do(func() {
		file_VolumeService_proto_rawDescData = protoimpl.X.CompressGZIP(file_VolumeService_proto_rawDescData)
	})
	return file_VolumeService_proto_rawDescData
}

var file_VolumeService_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_VolumeService_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_VolumeService_proto_goTypes = []interface{}{
	(MessageQueueInfoResponse_MQType)(0), // 0: org.opendedup.grpc.MessageQueueInfoResponse.MQType
	(*VolumeInfoRequest)(nil),            // 1: org.opendedup.grpc.VolumeInfoRequest
	(*VolumeInfoResponse)(nil),           // 2: org.opendedup.grpc.VolumeInfoResponse
	(*MessageQueueInfoResponse)(nil),     // 3: org.opendedup.grpc.MessageQueueInfoResponse
	(*ShutdownRequest)(nil),              // 4: org.opendedup.grpc.ShutdownRequest
	(*ShutdownResponse)(nil),             // 5: org.opendedup.grpc.ShutdownResponse
}
var file_VolumeService_proto_depIdxs = []int32{
	3, // 0: org.opendedup.grpc.VolumeInfoResponse.messageQueue:type_name -> org.opendedup.grpc.MessageQueueInfoResponse
	0, // 1: org.opendedup.grpc.MessageQueueInfoResponse.mqType:type_name -> org.opendedup.grpc.MessageQueueInfoResponse.MQType
	1, // 2: org.opendedup.grpc.VolumeService.GetVolumeInfo:input_type -> org.opendedup.grpc.VolumeInfoRequest
	4, // 3: org.opendedup.grpc.VolumeService.ShutdownVolume:input_type -> org.opendedup.grpc.ShutdownRequest
	2, // 4: org.opendedup.grpc.VolumeService.GetVolumeInfo:output_type -> org.opendedup.grpc.VolumeInfoResponse
	5, // 5: org.opendedup.grpc.VolumeService.ShutdownVolume:output_type -> org.opendedup.grpc.ShutdownResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_VolumeService_proto_init() }
func file_VolumeService_proto_init() {
	if File_VolumeService_proto != nil {
		return
	}
	file_Shutdown_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_VolumeService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_VolumeService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageQueueInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_VolumeService_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_VolumeService_proto_goTypes,
		DependencyIndexes: file_VolumeService_proto_depIdxs,
		EnumInfos:         file_VolumeService_proto_enumTypes,
		MessageInfos:      file_VolumeService_proto_msgTypes,
	}.Build()
	File_VolumeService_proto = out.File
	file_VolumeService_proto_rawDesc = nil
	file_VolumeService_proto_goTypes = nil
	file_VolumeService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VolumeServiceClient is the client API for VolumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VolumeServiceClient interface {
	// Define a RPC operation
	GetVolumeInfo(ctx context.Context, in *VolumeInfoRequest, opts ...grpc.CallOption) (*VolumeInfoResponse, error)
	ShutdownVolume(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type volumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVolumeServiceClient(cc grpc.ClientConnInterface) VolumeServiceClient {
	return &volumeServiceClient{cc}
}

func (c *volumeServiceClient) GetVolumeInfo(ctx context.Context, in *VolumeInfoRequest, opts ...grpc.CallOption) (*VolumeInfoResponse, error) {
	out := new(VolumeInfoResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.VolumeService/GetVolumeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) ShutdownVolume(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.VolumeService/ShutdownVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeServiceServer is the server API for VolumeService service.
type VolumeServiceServer interface {
	// Define a RPC operation
	GetVolumeInfo(context.Context, *VolumeInfoRequest) (*VolumeInfoResponse, error)
	ShutdownVolume(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
}

// UnimplementedVolumeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVolumeServiceServer struct {
}

func (*UnimplementedVolumeServiceServer) GetVolumeInfo(context.Context, *VolumeInfoRequest) (*VolumeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolumeInfo not implemented")
}
func (*UnimplementedVolumeServiceServer) ShutdownVolume(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownVolume not implemented")
}

func RegisterVolumeServiceServer(s *grpc.Server, srv VolumeServiceServer) {
	s.RegisterService(&_VolumeService_serviceDesc, srv)
}

func _VolumeService_GetVolumeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).GetVolumeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.VolumeService/GetVolumeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).GetVolumeInfo(ctx, req.(*VolumeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_ShutdownVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).ShutdownVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.VolumeService/ShutdownVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).ShutdownVolume(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VolumeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.opendedup.grpc.VolumeService",
	HandlerType: (*VolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVolumeInfo",
			Handler:    _VolumeService_GetVolumeInfo_Handler,
		},
		{
			MethodName: "ShutdownVolume",
			Handler:    _VolumeService_ShutdownVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "VolumeService.proto",
}
